#!/usr/bin/env bash
# Check and Combine Cert - Part of the Hawdon Script family
# Oh no, it's yet another Hawdon Script!

#####################################################
#     _ _____ _____ ___ _  _ _____ ___ ___  _  _ _  #
#    /_\_   _|_   _| __| \| |_   _|_ _/ _ \| \| | | #
#   / _ \| |   | | | _|| .` | | |  | | (_) | .` |_| #
#  /_/ \_\_|   |_| |___|_|\_| |_| |___\___/|_|\_(_) #
#                                                   #
#####################################################
#                                                   #
# Do not make changes to this file directly. This   #
# file is generated from the code blocks in the     #
# cert_check.org file and should be tangled using   #
# org-bable-tangle in emacs.                        #
#                                                   #
# If you're unfamilier with the emacs editor,       #
# ensure any changes you do make are also reflected #
# in the cert_check.org file to ensure your changes #
# aren't lost in the future.                        #
#                                                   #
#####################################################

# set -x

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Colour
DAYSEC='86400'

VERSION='0.3.2'

MAXAGEDAYS='398' # 398 Days maximum length for a publically issued server cert.
MAXAGESEC=$(awk "BEGIN{print ${MAXAGEDAYS}*${DAYSEC}}")
ENDWARN='30' # Flag warning if cert will expire within 30 days
ENDWARNSEC=$(awk "BEGIN{print ${ENDWARN}*${DAYSEC}}")

EXITCODE=0

printf "Certificate chain checker V%s\n\n" "${VERSION}"

printf "Checking for OpenSSL...\r"
if command -v openssl >/dev/null 2>&1 ; then
        opensslversion=$(openssl version)
        printf "Checking for OpenSSL... %bPASS%b (%s)\n\n" "${GREEN}" "${NC}" "${opensslversion}"
else
        printf "Checking for OpenSSL... %bFAIL%b\n\n" "${RED}" "${NC}"
        exit 255
fi

while getopts ":b:c:di:k:r:to:x" options; do
        case "${options}" in
                b)
                        bundle=${OPTARG}
                        ;;
                c)
                        cert=$(cat "${OPTARG}" 2> /dev/null)
                        ;;
                d)
                        checkDates=true
                        ;;
                i)
                        intermediate=$(cat "${OPTARG}" 2> /dev/null)
                        ;;
                k)
                        key=$(cat "${OPTARG}" 2> /dev/null)
                        ;;
                r)
                        root=$(cat "${OPTARG}" 2> /dev/null)
                        ;;
                o)
                        output=${OPTARG}
                        ;;
                t)
                        printThumbprint=true
                        ;;
                x)
                        exitOnFailure=true
                        ;;
                *)
                        # usage
                        ;;
        esac
done

shift "$(( OPTIND - 1))"

if [ "${checkDates}" ]; then
        if [[ ${OSTYPE} == "darwin"* ]]; then
                printf "MacOS detected, checking for gdate...\r"
                if command -v gdate >/dev/null 2>&1 ; then
                        DATE=$(command -v gdate)
                        printf "MacOS detected, checking for gdate... %bPASS%b\n" "${GREEN}" "${NC}"
                else
                        printf "MacOS detected, checking for gdate... %bFAIL%b\n" "${RED}" "${NC}"
                        exit 254
                fi
        else
                DATE=$(command -v date)
        fi
        currentEpoch=$(${DATE} -u +"%s")
fi

if [ -n "$bundle" ]; then
        if [[ ${OSTYPE} == "darwin"* ]]; then
                printf "MacOS detected, checking for gsed...\r"
                if command -v gsed >/dev/null 2>&1 ; then
                        SED=$(command -v gsed)
                        printf "MacOS detected, checking for gsed... %bPASS%b\n" "${GREEN}" "${NC}"
                else
                        printf "MacOS detected, checking for gsed... %bFAIL%b\n" "${RED}" "${NC}"
                        exit 254
                fi
        else
                SED=$(command -v sed)
        fi

        c=0
        OLDIFS=$IFS; IFS=';' blocks=$("${SED}" -n '/-----BEGIN /,/-----END/ {/-----BEGIN / s/^/\;/; p}'  "${bundle}");
        for block in ${blocks#;}; do
            bundleCert[c++]=$(printf "%s" "${block}")
        done; IFS=$OLDIFS

        if [ -n "${bundleCert[0]}" ]; then
                cert="${bundleCert[0]}"
        fi
        if [ -n "${bundleCert[1]}" ]; then
                intermediate="${bundleCert[1]}"
        fi
        if [ -n "${bundleCert[2]}" ]; then
                root="${bundleCert[2]}"
        fi
fi

if [ -n "$bundle" ]; then
        printf "\nUsing bundle\n"
elif [ -n "$cert" ] && [ -n "$intermediate" ]; then
        printf "\nUsing separate certs\n"
else
        echo 'Missing required arguments (-c, -i, or -b)' >&2
        exit 250
fi

if [ -n "$root" ] ; then
        checkroot=true
fi

if [ -n "$output" ] ; then
        combine=true
fi

if [ -n "$key" ] ; then
        checkKey=true
else
        printf "\n%bNo key provided, key checks will not be performed%b\n" "${YELLOW}" "${NC}"
fi

if [ "${checkDates}" ]; then
        printf "\nChecking Cert's dates...\n"
        certStartDate=$(printf "%s" "${cert}" | openssl x509 -noout -startdate 2>/dev/null | awk -F '=' '{print $NF}')
        certEndDate=$(printf "%s" "${cert}" | openssl x509 -noout -enddate 2>/dev/null | awk -F '=' '{print $NF}')

        certStartEpoch=$("${DATE}" --date="${certStartDate}" -u +"%s")
        certEndEpoch=$("${DATE}" --date="${certEndDate}" -u +"%s")

        certAge=$(awk "BEGIN{print ${certEndEpoch}-${certStartEpoch}}")
        certAgeDays=$(awk "BEGIN{print ${certAge}/${DAYSEC}}")

        certEndWarn=$(awk "BEGIN{print ${currentEpoch}+${ENDWARNSEC}}")

        if [ "${certStartEpoch}" -lt "${currentEpoch}" ] ; then
                printf "Start Date... %bPASS%b (%s)\n" "${GREEN}" "${NC}" "${certStartDate}"
        else
                printf "Start Date... %bWARN%b (%s)\n" "${YELLOW}" "${NC}" "${certStartDate}"
        fi

        if [ "${certEndWarn}" -gt "${certEndEpoch}" ] ; then
                printf "End Date... %bWARN%b (%s)\n" "${YELLOW}" "${NC}" "${certEndDate}"
        elif [ "${certEndEpoch}" -gt "${currentEpoch}" ] ; then
                printf "End Date... %bPASS%b (%s)\n" "${GREEN}" "${NC}" "${certEndDate}"
        else
                printf "End Date... %bFAIL%b (%s)\n" "${RED}" "${NC}" "${certEndDate}"
                EXITCODE=1
                if [ "${exitOnFailure}" ] ; then
                        exit "${EXITCODE}"
                fi
        fi

        if [ "${certAge}" -lt "${MAXAGESEC}" ] ; then
                printf "Certificate Maximum Age... %bPASS%b (%s day(s))\n" "${GREEN}" "${NC}" "${certAgeDays}"
        else
                printf "Certificate Maximum Age... %bFAIL%b (%s day(s))\n" "${RED}" "${NC}" "${certAgeDays}"
                EXITCODE=1
                if [ "${exitOnFailure}" ] ; then
                        exit "${EXITCODE}"
                fi
        fi

fi

printf "\nChecking Cert's Intermediate...\r"
certIssuerHash=$(printf "%s" "${cert}" | openssl x509 -issuer_hash -noout 2>/dev/null)
intermediateHash=$(printf "%s" "${intermediate}" | openssl x509 -hash -noout 2>/dev/null)

if [ "${certIssuerHash}" == "${intermediateHash}" ] ; then
        printf "Checking Cert's Intermediate... %bPASS%b\n" "${GREEN}" "${NC}"
else
        printf "Checking Cert's Intermediate... %bFAIL%b\n" "${RED}" "${NC}"
        EXITCODE=2
        if [ "${exitOnFailure}" ] ; then
                exit "${EXITCODE}"
        fi
fi

if [ "${checkDates}" ]; then
        printf "Checking Intermediate's dates...\n"
        certStartDate=$(printf "%s" "${intermediate}" | openssl x509 -noout -startdate 2>/dev/null | awk -F '=' '{print $NF}')
        certEndDate=$(printf "%s" "${intermediate}" | openssl x509 -noout -enddate 2>/dev/null | awk -F '=' '{print $NF}')

        certStartEpoch=$("${DATE}" --date="${certStartDate}" -u +"%s")
        certEndEpoch=$("${DATE}" --date="${certEndDate}" -u +"%s")

        if [ "${certStartEpoch}" -lt "${currentEpoch}" ] ; then
                printf "Start Date... %bPASS%b (%s)\n" "${GREEN}" "${NC}" "${certStartDate}"
        else
                printf "Start Date... %bWARN%b (%s)\n" "${YELLOW}" "${NC}" "${certStartDate}"
        fi

        if [ "${certEndEpoch}" -gt "${currentEpoch}" ] ; then
                printf "End Date... %bPASS%b (%s)\n" "${GREEN}" "${NC}" "${certEndDate}"
        else
                printf "End Date... %bFAIL%b (%s)\n" "${RED}" "${NC}" "${certEndDate}"
                EXITCODE=1
                if [ "${exitOnFailure}" ] ; then
                        exit "${EXITCODE}"
                fi
        fi

fi

if [ "${checkroot}" ] ; then
        printf "\nChecking Intermediate's Root...\r"
        intermediateIssuerHash=$(printf "%s" "${intermediate}" | openssl x509 -issuer_hash -noout 2>/dev/null)
        rootHash=$(printf "%s" "${root}" | openssl x509 -hash -noout 2>/dev/null)
        if [ "${intermediateIssuerHash}" == "${rootHash}" ] ; then
                printf "Checking Intermediate's Root... %bPASS%b\n" "${GREEN}" "${NC}"
        else
                printf "Checking Intermediate's Root... %bFAIL%b\n" "${RED}" "${NC}"
                EXITCODE=3
                if [ "${exitOnFailure}" ] ; then
                        exit "${EXITCODE}"
                fi
        fi

        if [ "${checkDates}" ]; then
                printf "Checking Intermediate's Root's dates...\n"
                certStartDate=$(printf "%s" "${root}" | openssl x509 -noout -startdate 2>/dev/null | awk -F '=' '{print $NF}')
                certEndDate=$(printf "%s" "${root}" | openssl x509 -noout -enddate 2>/dev/null | awk -F '=' '{print $NF}')

                certStartEpoch=$("${DATE}" --date="${certStartDate}" -u +"%s")
                certEndEpoch=$("${DATE}" --date="${certEndDate}" -u +"%s")

                if [ "${certStartEpoch}" -lt "${currentEpoch}" ] ; then
                        printf "Start Date... %bPASS%b (%s)\n" "${GREEN}" "${NC}" "${certStartDate}"
                else
                        printf "Start Date... %bWARN%b (%s)\n" "${YELLOW}" "${NC}" "${certStartDate}"
                fi

                if [ "${certEndEpoch}" -gt "${currentEpoch}" ] ; then
                        printf "End Date... %bPASS%b (%s)\n" "${GREEN}" "${NC}" "${certEndDate}"
                else
                        printf "End Date... %bFAIL%b (%s)\n" "${RED}" "${NC}" "${certEndDate}"
                        EXITCODE=1
                        if [ "${exitOnFailure}" ] ; then
                                exit "${EXITCODE}"
                        fi
                fi

        fi
fi

if [ "${checkKey}" ] ; then
        printf "\nChecking Cert matches Key...\r"

        certModulusHash=$(printf "%s" "${cert}" | openssl x509 -noout -modulus 2>/dev/null)
        keyModulusHash=$(printf "%s" "${key}" | openssl rsa -noout -modulus 2>/dev/null)

        if [ "${certModulusHash}" == "${keyModulusHash}" ] ; then
                printf "Checking Cert matches Key... %bPASS%b\n" "${GREEN}" "${NC}"
        else
                printf "Checking Cert matches Key... %bFAIL%b\n" "${RED}" "${NC}"
                EXITCODE=4
                if [ "${exitOnFailure}" ] ; then
                        exit "${EXITCODE}"
                fi
        fi
fi

if [ "${combine}" ] ; then
        if [ "${EXITCODE}" -eq 0 ] ; then
                printf "\nAll checks passed, writing combined file...\n"

                if [ "${checkroot}" ]; then
                        printf "%s\n%s\n%s" "${cert}" "${intermediate}" "${root}" > "${output}"
                else
                        printf "%s\n%s" "${cert}" "${intermediate}" > "${output}"
                fi
        else
                printf "\nOne or more checks failed, not combining file...\n"
        fi

else
        if [ "${EXITCODE}" -eq 0 ] ; then
                printf "\nAll checks passed, no output specified. \n"
        else
                printf "\nOne or more checks failed. \n"
        fi

fi

if [ "${printThumbprint}" ] && [ "${EXITCODE}" -eq 0 ] ; then
        thumbprint=$(printf "%s" "${cert}" | openssl x509 -outform DER 2>/dev/null | sha1sum | awk '{ print $1 }')
        printf "\nCertificate Thumbprint: %s\n" "${thumbprint}"
fi

printf "\nComplete\n"

exit "${EXITCODE}"
