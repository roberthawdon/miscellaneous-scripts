#!/usr/bin/env bash
#   ______________  ___
#  /_  __/ ____/  |/  /___ _____  ____ _____ ____
#   / / / /_  / /|_/ / __ `/ __ \/ __ `/ __ `/ _ \
#  / / / __/ / /  / / /_/ / / / / /_/ / /_/ /  __/
# /_/ /_/   /_/  /_/\__,_/_/ /_/\__,_/\__, /\___/
#                                    /____/
#
#       T E R R A F O R M   M A N A G E R
#               Universal Edition
#                +-------------+
#                 Robert Hawdon
#
# Requires curl, unzip, and jq


ARG=$1
TARGETVER=$2

TFMVER="0.5.0"

function showhelp(){
    echo "Usage: $0 <command> [arg]

Version ${TFMVER}

Terraform Manager is a script that manages the installed version of Terraform
on your system. It is designed to work on the following systems: Linux, MacOS,
and FreeBSD. OpenBSD and Solaris support to come later.

Common commands:
    exact [latest], [version]      Installs the latest version of Terraform
    upgrade                        Upgrades Terraform to the latest version
    version                        Shows the version of this script
    help                           Displays this help screen

Running the script without any command will perform a dependency and version
check and will advise if you need to upgrade.

The following applications are dependencies: curl, unzip, and jq
"
}

function checkterraform() {
    echo "----- TFManage: Checking Terraform is installed."
    if command -v terraform >/dev/null 2>&1 ; then
        echo "----- TFManage: terraform found"
    else
        >&2 echo "Terraform is not installed. Run 'tfmanage exact latest' to install terraform."
        exit 1
    fi
}

function checkdependencies() {
    echo "----- TFManage: Checking dependencies"
    if command -v curl >/dev/null 2>&1 ; then
        echo "----- TFManage: curl found"
    else
        >&2 echo "curl not found on your system. Aborting."
        exit 1
    fi

    if command -v unzip >/dev/null 2>&1 ; then
        echo "----- TFManage: unzip found"
    else
        >&2 echo "unzip not found on your system. Aborting."
        exit 1
    fi

    if command -v jq >/dev/null 2>&1 ; then
        echo "----- TFManage: jq found"
    else
        >&2 echo "jq not found on your system. Aborting."
        exit 1
    fi
}

function detectos() {

  if [[ "${OSTYPE}" == "linux-gnu" ]]; then
    KERNEL="linux"
    INSTPATH="/usr/bin"
    echo "----- TFManage: OS Detected as Linux"
  elif [[ "${OSTYPE}" == "darwin"* ]]; then
    KERNEL="darwin"
    INSTPATH="/usr/local/bin"
    echo "----- TFManage: OS Detected as MacOS"
  elif [[ "${OSTYPE}" == "cygwin" ]]; then
    echo "----- TFManage: OS Detected as Windows (running Cygwin)"
    >&2 echo "This script currently does not support Cygwin"
    exit 1
  elif [[ "${OSTYPE}" == "msys" ]]; then
    echo "----- TFManage: OS Detected as Windows (Git Bash)"
    >&2 echo "This script currently does not support Windows"
    exit 1
  elif [[ "${OSTYPE}" == "win32" ]]; then
    echo "----- TFManage: OS Detected as Windows"
    >&2 echo "This script currently does not support Windows"
    exit 1
  elif [[ "${OSTYPE}" == "freebsd"* ]]; then
    echo "----- TFManage: OS Detected as FreeBSD"
    KERNEL="freebsd"
    INSTPATH="/usr/local/bin"
  else
    echo "----- TFManage: OS Not Detected"
    >&2 echo "The script was unable to detect your OS ${OSTYPE}"
    exit 1
  fi

  # Now lets detect the architecture

  UNAMEM=$(uname -m)
  case "${UNAMEM}" in
    x86)   ARCH="386" ;;
    ia64)  ARCH="amd64" ;;
    i?86)  ARCH="386" ;;
    amd64) ARCH="amd64" ;;
    x86_64) ARCH="amd64" ;;
    arm*) ARCH="arm" ;;
    *) ARCH="error" ;;
  esac

  # Print that we've detected the architecture

  if [[ "${ARCH}" == "386" ]]; then
    echo "----- TFManage: 32-bit x86 CPU Detected"
  elif [[ "${ARCH}" == "amd64" ]]; then
    echo "----- TFManage: 64-bit x86 CPU Detected"
  elif [[ "${ARCH}" == "arm" ]]; then
    echo "----- TFManage: ARM CPU Detected"
  else
    >&2 echo "----- TFManage: ${UNAMEM} Not Supported"
    exit 1
  fi

  # Some sanity checks needed for impossible situations

  if [[ "${ARCH}" != "amd64" ]] && [[ "${KERNEL}" == "darwin" ]]; then
    >&2 echo "----- TFManage: 32 bit Macs are unsupported by Terraform"
    exit 1
  fi

}

function currentversion() {

    TFVER=$(terraform --version | head -1 | sed 's/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/')

}

function lateststableversion() {
    # MacOS seems to support the --version-sort in sort now.
    LATEST=$(curl --silent https://releases.hashicorp.com/index.json | jq '.[] | select(.name=="terraform") | .versions[].version' | sort --version-sort -r | grep -v rc | grep -v beta | grep -v alpha | head -1 | awk -F'[\"]' '{print $2}')

}

function checkversion() {

    if [ "${TFVER}" == "${LATEST}" ]; then
        return 0
    else
        return 1
    fi

}

function installtf() {

    if [ -z "$1" ]; then
        VERSION="${LATEST}"
    else
        VERSION="$1"
    fi

    terraform_url=$(curl --silent https://releases.hashicorp.com/index.json | jq ".[] | select(.name==\"terraform\") | .versions[] | select(.version==\"${VERSION}\")" | grep -E "${KERNEL}.${ARCH}" | grep -E "url" | awk -F[\"] '{print $4}')

    if [ -z "${terraform_url}" ]; then
      >&2 echo "----- TFManage: Unable to locate version ${VERSION}. Aborting."
      exit 1
    fi

    echo "----- TFManage: Downloading Terraform from ${terraform_url}"
    if [ "${KERNEL}" == "linux" ]; then
        TMPTF=$(mktemp -d -t 'tfmanage.XXXXXXXX')
    else
        TMPTF=$(mktemp -d -t 'tfmanage')
    fi

    curl --silent -o "${TMPTF}/terraform.zip" "${terraform_url}"

    echo "----- TFManage: Extracting and moving Terraform to ${INSTPATH}"
    unzip "${TMPTF}/terraform.zip" -d "${TMPTF}"
    sudo mv "${TMPTF}/terraform" "${INSTPATH}"

    echo "----- TFManage: Cleaning up..."
    rm -rf "${TMPTF}"

}

function main() {

    if [ -z "${ARG}" ]; then
        checkdependencies
        checkterraform
        currentversion
        lateststableversion
        if checkversion; then
            echo "Terraform is currently at the latest version (${LATEST})."
        else
            echo "Your copy of Terraform (${TFVER}) is either outdated, or you're using an unreleased version. Type '$0 upgrade' to upgrade to Terraform v${LATEST}."
        fi
    elif [ "${ARG}" == "upgrade" ]; then
        checkdependencies
        checkterraform
        detectos
        currentversion
        lateststableversion
        if checkversion; then
            echo "Terraform is currently at the latest version (${LATEST}). There is no need to upgrade."
        else
            installtf "${LATEST}"
        fi
    elif [ "${ARG}" == "exact" ]; then
        checkdependencies
        detectos
        if [ -z "${TARGETVER}" ]; then
            echo "No version specified."
            exit 1
        elif [ "${TARGETVER}" == 'latest' ]; then
            lateststableversion
            installtf "${LATEST}"
        else
            installtf "${TARGETVER}"
        fi
    elif [ "${ARG}" == "version" ]; then
        echo "TFManage version ${TFMVER}."
        exit 0
    elif [ "${ARG}" == "help" ]; then
        showhelp
        exit 0
    else
        echo "Invalid argument ${ARG}."
        exit 1
    fi

}

main
